/* eslint-disable no-warning-comments */

import '@ciscospark/plugin-phone';

import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';
import setValue from '../lib/set-value';

describe(`sample-browser-multi-party-call`, () => {

  describe(`dial and reject`, () => {

    let mccoy, roomId, spock;

    const browserSpock = browser.select(`browserSpock`);
    const browserMccoy = browser.select(`browserMccoy`);

    const users = {
      mccoy: null,
      spock: null
    };

    before(`create users and register`, () => testUsers.create({count: Object.keys(users).length})
      .then((created) => Promise.all(Object.keys(users).map((name, index) => {
        const user = users[name] = created[index];
        user.spark = new CiscoSpark({
          credentials: {
            authorization: user.token
          }
        });

        return user.spark.phone.register();
      })))
      .then(() => {
        mccoy = users.mccoy;
        spock = users.spock;
      }));

    beforeEach(`enable group calling`, () => {
      spock.spark.config.phone.enableExperimentalGroupCallingSupport = true;
      mccoy.spark.config.phone.enableExperimentalGroupCallingSupport = true;
    });

    afterEach(`disable group calling`, () => {
      spock.spark.config.phone.enableExperimentalGroupCallingSupport = false;
      mccoy.spark.config.phone.enableExperimentalGroupCallingSupport = false;
    });

    step(`create test room and add members to room`, () => {
      spock.spark.request({
        method: `POST`,
        service: `hydra`,
        resource: `rooms`,
        body: {
          title: `Call Test`
        }
      })
        .then((res) => {
          const room = res.body;

          roomId = room.id;

          return spock.spark.request({
            method: `POST`,
            service: `hydra`,
            resource: `memberships`,
            body: {
              roomId: room.id,
              personId: mccoy.id
            }
          });
        });
    });

    step(`loads the app`, () => {
      browser.url(`/packages/node_modules/sample-browser-multi-party-call?usefakemedia`);
    });

    step(`connects mccoy's browser`, () => {
      browserMccoy.waitUntil(() => browserMccoy.getTitle() === `Sample: Multi Party Calling`);
      browserMccoy.execute(setValue, `[placeholder="Your access token"]`, mccoy.token.access_token);
      browserMccoy.click(`[title="connect"]`);
      browserMccoy.waitForExist(`.listening`);
    });

    step(`connects spock's browser`, () => {
      browserSpock.waitUntil(() => browserSpock.getTitle() === `Sample: Multi Party Calling`);
      browserSpock.execute(setValue, `[placeholder="Your access token"]`, spock.token.access_token);
      browserSpock.click(`[title="connect"]`);
      browserSpock.waitForExist(`.listening`);
    });

    step(`spock places call to room, mccoy rejects`, () => {

      browserSpock.setValue(`[placeholder="Room ID or SIP Uri"]`, roomId);
      // Debouncing before dialing ruduces flakiness
      browserSpock.pause(500);
      browserSpock.click(`[title="dial"]`);

      // TODO how do we wait for a modal to open?
      browserMccoy.waitUntil(() => {
        try {
          browserMccoy.alertDismiss();
          browserSpock.click(`[title="hangup"]`);
          return true;
        }
        catch (err) {
          return false;
        }
      });
    });
  });
});
