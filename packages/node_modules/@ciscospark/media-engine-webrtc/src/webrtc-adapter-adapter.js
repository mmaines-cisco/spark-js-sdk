/**
 * @file webrtc-adapter-adapter
 * Yep, you read that filename right. There seems to be a bug in adapter.js that
 * doesn't quite clean up everythings it supposed to. This is an adapter for the
 * adapter that makes sure it removes the correct streams from the
 * PeerConnection's caches
 */

try {
  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  // eslint-disable-next-line complexity
  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    // eslint-disable-next-line consistent-this
    const pc = this;

    let streamsId;
    let reverseStreamsId;

    if (pc._streams || pc._reverseStreams) {
      reverseStreamsId = pc._streams[stream.id] ? pc._streams[stream.id].id : stream.id;
      // streamsId = pc._reverseStreams[reverseStreamsId] ? pc._reverseStreams[reverseStreamsId].id : stream.id;
      streamsId = pc._reverseStreams[pc._streams[stream.id] ? pc._streams[stream.id].id : stream.id].id;
    }

    Reflect.apply(origRemoveStream, pc, [stream]);

    if (streamsId) {
      Reflect.deleteProperty(pc._streams, streamsId);
    }

    if (reverseStreamsId) {
      Reflect.deleteProperty(pc._reverseStreams, reverseStreamsId);
    }

  };
}
catch (err) {
  // eslint-disable-next-line no-console
  console[process.env.NODE_ENV === `production` ? `info` : `warn`](`Failed to apply webrtc patch. Are we running in an environment that disallows altering globals?`, err);
}

try {
  // eslint-disable-next-line global-require
  require(`webrtc-adapter`);
}
catch (err) {
  // eslint-disable-next-line no-console
  console[process.env.NODE_ENV === `production` ? `info` : `warn`](`Failed to apply adapter.js. Are we running in an environment that disallows altering globals?`, err);
}


// var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
// window.RTCPeerConnection.prototype.removeStream = function(stream) {
//   var pc = this;
//   pc._streams = pc._streams || {};
//   pc._reverseStreams = pc._reverseStreams || {};

//   var streamsId = pc._reverseStreams[(pc._streams[stream.id] ?
//     pc._streams[stream.id].id : stream.id)].id
//   origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
//   delete pc._reverseStreams[(pc._streams[stream.id] ?
//       pc._streams[stream.id].id : stream.id)];
//   delete pc._streams[streamsId];
// };
