/*!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {SparkPlugin, Page} from '@ciscospark/spark-core';

/**
 * @typedef {Object} TeamObject
 * @property {string} id - (server generated) The unique ID for the team.
 * @property {string} name - The name of the team.
 * @property {isoDate} created - (server generated) The date and time when the
 * team was created, in ISO8601 format.
 */

/**
* @class
 */
const Teams = SparkPlugin.extend({
  /**
   * Create a new team.
   * @instance
   * @param {TeamObject} team
   * @returns {Promise<TeamObject>}
   * @memberof Teams
   * @example
   * ciscospark.teams.create({name: 'Create Team Example'})
   *   .then(function(team) {
   *     return 'success';
   *   });
   *   // => success
   */
  create(team) {
    return this.request({
      method: `POST`,
      service: `hydra`,
      resource: `teams`,
      body: team
    })
      .then((res) => res.body);
  },

  /**
   * Returns a single team
   * @instance
   * @param {TeamObject|string} team
   * @param {Object} options
   * @returns {Promise<TeamObject>}
   * @memberof Teams
   * @example
   * ciscospark.teams.create({name: 'Get Team Example'})
   *   .then(function(team) {
   *     return ciscospark.teams.get(team.id);
   *   })
   *   .then(function(team) {
   *     return 'success';
   *   });
   *   // => success
   */
  get(team, options) {
    const id = team.id || team;

    return this.request({
      service: `hydra`,
      resource: `teams/${id}`,
      qs: options
    })
      .then((res) => res.body.items || res.body);
  },

  /**
   * List teams.
   * @instance
   * @param {Object} options
   * @param {Object} options.max Limit the maximum number of teams in the
   * response.
   * @returns {Promise<Page<TeamObject>>}
   * @memberof Teams
   * @example
   * Promise.all([
   *   ciscospark.teams.create({name: 'List Teams Example 1'}),
   *   ciscospark.teams.create({name: 'List Teams Example 2'}),
   *   ciscospark.teams.create({name: 'List Teams Example 3'})
   * ])
   *   .then(function(teams) {
   *     return ciscospark.teams.list({max: 3});
   *   })
   *   .then(function(teams) {
   *     return 'success';
   *   });
   *   // => success
   */
  list(options) {
    return this.request({
      service: `hydra`,
      resource: `teams/`,
      qs: options
    })
      .then((res) => new Page(res, this.spark));
  },

  /**
   * Update a team.
   * @instance
   * @param {TeamObject} team
   * @returns {Promise<TeamObject>}
   * @memberof Teams
   * @example
   * ciscospark.teams.create({name: 'Update Team Example'})
   *   .then(function(teams) {
   *     teams.name = 'Teams Example (Updated Title)';
   *     return ciscospark.teams.update(teams);
   *   })
   *   .then(function(team) {
   *     return 'success';
   *   });
   *   // => success
   */
  update(team) {
    const id = team.id;
    return this.request({
      method: `PUT`,
      service: `hydra`,
      resource: `teams/${id}`,
      body: team
    })
      .then((res) => res.body);
  }
});

export default Teams;
